import torch

from utils.cmu_humanoid_find_sp import CMU_HUMANOID_SP

from utils.build_mocapact_mask import create_cmu_humanoid_obs_idx

MAPS = { # First index is a list that contains the indices of the observation, the second index is a list that contains the indices of the action 
    'D4RL/door/expert-v2': {
        'forehand': [list(range(3)) + [27, 28] + [32, 33, 34] + [38], list(range(4))],
        'wrist': [[3], [4]],
        'palm': [[4] + [29, 30, 31] + [35, 36, 37], [5]],
        'ffknuckle': [[5], [6]],
        'ffproximal': [[6], [7]],
        'ffmiddle': [[7], [8]],
        'ffdistal': [[8], [9]],
        'mfknuckle': [[9], [10]],
        'mfproximal': [[10], [11]],
        'mfmiddle': [[11], [12]],
        'mfdistal': [[12], [13]],
        'rfknuckle': [[13], [14]],
        'rfproximal': [[14], [15]],
        'rfmiddle': [[15], [16]],
        'rfdistal': [[16], [17]],
        'lfmetacarpal': [[17], [18]],
        'lfknuckle': [[18], [19]],
        'lfproximal': [[19], [20]],
        'lfmiddle': [[20], [21]],
        'lfdistal': [[21], [22]],
        'thbase': [[22], [23]],
        'thproximal': [[23], [24]],
        'thhub': [[24], [25]],
        'thmiddle': [[25], [26]],
        'thdistal': [[26], [27]]
    },
    'D4RL/hammer/expert-v2': {
        'forehand': [list(range(2)) + list(range(26,33)) + list(range(36,46)), list(range(2))],
        'wrist': [[2], [2]],
        'palm': [[3] + [33, 34, 35], [3]],
        'ffknuckle': [[4], [4]],
        'ffproximal': [[5], [5]],
        'ffmiddle': [[6], [6]],
        'ffdistal': [[7], [7]],
        'mfknuckle': [[8], [8]],
        'mfproximal': [[9], [9]],
        'mfmiddle': [[10], [10]],
        'mfdistal': [[11], [11]],
        'rfknuckle': [[12], [12]],
        'rfproximal': [[13], [13]],
        'rfmiddle': [[14], [14]],
        'rfdistal': [[15], [15]],
        'lfmetacarpal': [[16], [16]],
        'lfknuckle': [[17], [17]],
        'lfproximal': [[18], [18]],
        'lfmiddle': [[19], [19]],
        'lfdistal': [[20], [20]],
        'thbase': [[21], [21]],
        'thproximal': [[22], [22]],
        'thhub': [[23], [23]],
        'thmiddle': [[24], [24]],
        'thdistal': [[25], [25]]
    },
    'D4RL/relocate/expert-v2': {
        'forehand': [list(range(6)) + [36, 37, 38], list(range(6))],
        'wrist': [[6], [6]],
        'palm': [[7] + [30, 31, 32, 33, 34, 35], [7]],
        'ffknuckle': [[8], [8]],
        'ffproximal': [[9], [9]],
        'ffmiddle': [[10], [10]],
        'ffdistal': [[11], [11]],
        'mfknuckle': [[12], [12]],
        'mfproximal': [[13], [13]],
        'mfmiddle': [[14], [14]],
        'mfdistal': [[15], [15]],
        'rfknuckle': [[16], [16]],
        'rfproximal': [[17], [17]],
        'rfmiddle': [[18], [18]],
        'rfdistal': [[19], [19]],
        'lfmetacarpal': [[20], [20]],
        'lfknuckle': [[21], [21]],
        'lfproximal': [[22], [22]],
        'lfmiddle': [[23], [23]],
        'lfdistal': [[24], [24]],
        'thbase': [[25], [25]],
        'thproximal': [[26], [26]],
        'thhub': [[27], [27]],
        'thmiddle': [[28], [28]],
        'thdistal': [[29], [29]]
    },
    "mocapact": { # This is built programmatically 
        "root":  [[], []],
        "lhipjoint": [[], []],
        "lfemur": [[], []],
        "ltibia": [[], []],
        "lfoot": [[], []],
        "ltoes": [[], []],
        "rhipjoint": [[], []],
        "rfemur": [[], []],
        "rtibia": [[], []],
        "rfoot": [[], []],
        "rtoes": [[], []],
        "lowerback": [[], []],
        "upperback": [[], []],
        "thorax": [[], []],
        "lowerneck": [[], []],
        "upperneck": [[], []],
        "head": [[], []],
        "face": [[], []],
        "lclavicle": [[], []],
        "lhumerus": [[], []],
        "lradius": [[], []],
        "lwrist": [[], []],
        "lhand": [[], []],
        "lfingers": [[], []],
        "lthumb": [[], []],
        "rclavicle": [[], []],
        "rhumerus": [[], []],
        "rradius": [[], []],
        "rwrist": [[], []],
        "rhand": [[], []],
        "rfingers": [[], []],
        "rthumb": [[], []],
    },
        "PickCube-v1": {
        "q1": [ list(range(14,23)) + [0],[0]],
        "q2": [ list(range(23,32)) + [1],[1]],
        "q3": [ list(range(32,41)) + [2],[2]],
        "q4": [ list(range(41,50)) + [3],[3]],
        "q5": [ list(range(50,59)) + [4],[4]],
        "q6": [ list(range(59,68)) + [5],[5]],
        "q7": [ list(range(68,77)) + [6],[6]],
        "tcp": [list(range(77,93)),[7]],
        "obj": [list(range(93,102)),[]],
        "goal": [list(range(102,111)),[]],
    },
        "StackCube-v1": {
        "q1": [ [0],[0]],
        "q2": [ [1],[1]],
        "q3": [ [2],[2]],
        "q4": [ [3],[3]],
        "q5": [ [4],[4]],
        "q6": [ [5],[5]],
        "q7": [ [6],[6]],
        "tcp": [list(range(7,27)),[7]],
        "cubeA": [list(range(27,36)),[]],
        "cubeB": [list(range(36,45)),[]],
    },
        "LiftPegUpright-v1": {
        "q1": [ [0],[0]],
        "q2": [ [1],[1]],
        "q3": [ [2],[2]],
        "q4": [ [3],[3]],
        "q5": [ [4],[4]],
        "q6": [ [5],[5]],
        "q7": [ [6],[6]],
        "tcp": [list(range(7,18)),[7]],
        "peg": [list(range(18,27)),[]],
        },
}

SP_MATRICES = {
    'D4RL/door/expert-v2': torch.Tensor(
        [[0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [1, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [2, 1, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],
         [3, 2, 1, 0, 1, 2, 3, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [5, 4, 3, 2, 1, 0, 1, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8],
         [6, 5, 4, 3, 2, 1, 0, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9],
         [3, 2, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [4, 3, 2, 3, 4, 5, 6, 1, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [5, 4, 3, 4, 5, 6, 7, 2, 1, 0, 1, 4, 5, 6, 7, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8],
         [6, 5, 4, 5, 6, 7, 8, 3, 2, 1, 0, 5, 6, 7, 8, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9],
         [3, 2, 1, 2, 3, 4, 5, 2, 3, 4, 5, 0, 1, 2, 3, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [4, 3, 2, 3, 4, 5, 6, 3, 4, 5, 6, 1, 0, 1, 2, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [5, 4, 3, 4, 5, 6, 7, 4, 5, 6, 7, 2, 1, 0, 1, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8],
         [6, 5, 4, 5, 6, 7, 8, 5, 6, 7, 8, 3, 2, 1, 0, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9],
         [3, 2, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 4, 5, 6],
         [4, 3, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 1, 0, 1, 2, 3, 3, 4, 5, 6, 7],
         [5, 4, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 2, 1, 0, 1, 2, 4, 5, 6, 7, 8],
         [6, 5, 4, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 3, 2, 1, 0, 1, 5, 6, 7, 8, 9],
         [7, 6, 5, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 4, 3, 2, 1, 0, 6, 7, 8, 9, 10],
         [3, 2, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4],
         [4, 3, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 7, 1, 0, 1, 2, 3],
         [5, 4, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 2, 1, 0, 1, 2],
         [6, 5, 4, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 9, 3, 2, 1, 0, 1],
         [7, 6, 5, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 10, 4, 3, 2, 1, 0]]),
    'D4RL/hammer/expert-v2': torch.Tensor(
        [[0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [1, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [2, 1, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],
         [3, 2, 1, 0, 1, 2, 3, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [5, 4, 3, 2, 1, 0, 1, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8],
         [6, 5, 4, 3, 2, 1, 0, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9],
         [3, 2, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [4, 3, 2, 3, 4, 5, 6, 1, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [5, 4, 3, 4, 5, 6, 7, 2, 1, 0, 1, 4, 5, 6, 7, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8],
         [6, 5, 4, 5, 6, 7, 8, 3, 2, 1, 0, 5, 6, 7, 8, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9],
         [3, 2, 1, 2, 3, 4, 5, 2, 3, 4, 5, 0, 1, 2, 3, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [4, 3, 2, 3, 4, 5, 6, 3, 4, 5, 6, 1, 0, 1, 2, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [5, 4, 3, 4, 5, 6, 7, 4, 5, 6, 7, 2, 1, 0, 1, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8],
         [6, 5, 4, 5, 6, 7, 8, 5, 6, 7, 8, 3, 2, 1, 0, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9],
         [3, 2, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 4, 5, 6],
         [4, 3, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 1, 0, 1, 2, 3, 3, 4, 5, 6, 7],
         [5, 4, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 2, 1, 0, 1, 2, 4, 5, 6, 7, 8],
         [6, 5, 4, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 3, 2, 1, 0, 1, 5, 6, 7, 8, 9],
         [7, 6, 5, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 4, 3, 2, 1, 0, 6, 7, 8, 9, 10],
         [3, 2, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4],
         [4, 3, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 7, 1, 0, 1, 2, 3],
         [5, 4, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 2, 1, 0, 1, 2],
         [6, 5, 4, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 9, 3, 2, 1, 0, 1],
         [7, 6, 5, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 10, 4, 3, 2, 1, 0]]),
    'D4RL/relocate/expert-v2': torch.Tensor(
        [[0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [1, 0, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [2, 1, 0, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5],
         [3, 2, 1, 0, 1, 2, 3, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [4, 3, 2, 1, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [5, 4, 3, 2, 1, 0, 1, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8],
         [6, 5, 4, 3, 2, 1, 0, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9],
         [3, 2, 1, 2, 3, 4, 5, 0, 1, 2, 3, 2, 3, 4, 5, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [4, 3, 2, 3, 4, 5, 6, 1, 0, 1, 2, 3, 4, 5, 6, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [5, 4, 3, 4, 5, 6, 7, 2, 1, 0, 1, 4, 5, 6, 7, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8],
         [6, 5, 4, 5, 6, 7, 8, 3, 2, 1, 0, 5, 6, 7, 8, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9],
         [3, 2, 1, 2, 3, 4, 5, 2, 3, 4, 5, 0, 1, 2, 3, 2, 3, 4, 5, 6, 2, 3, 4, 5, 6],
         [4, 3, 2, 3, 4, 5, 6, 3, 4, 5, 6, 1, 0, 1, 2, 3, 4, 5, 6, 7, 3, 4, 5, 6, 7],
         [5, 4, 3, 4, 5, 6, 7, 4, 5, 6, 7, 2, 1, 0, 1, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8],
         [6, 5, 4, 5, 6, 7, 8, 5, 6, 7, 8, 3, 2, 1, 0, 5, 6, 7, 8, 9, 5, 6, 7, 8, 9],
         [3, 2, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 0, 1, 2, 3, 4, 2, 3, 4, 5, 6],
         [4, 3, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 1, 0, 1, 2, 3, 3, 4, 5, 6, 7],
         [5, 4, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 2, 1, 0, 1, 2, 4, 5, 6, 7, 8],
         [6, 5, 4, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 3, 2, 1, 0, 1, 5, 6, 7, 8, 9],
         [7, 6, 5, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 4, 3, 2, 1, 0, 6, 7, 8, 9, 10],
         [3, 2, 1, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4],
         [4, 3, 2, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 3, 4, 5, 6, 7, 1, 0, 1, 2, 3],
         [5, 4, 3, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 6, 7, 8, 2, 1, 0, 1, 2],
         [6, 5, 4, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 5, 6, 7, 8, 9, 3, 2, 1, 0, 1],
         [7, 6, 5, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 6, 7, 8, 9, 10, 4, 3, 2, 1, 0]]),
    "mocapact": torch.Tensor(CMU_HUMANOID_SP),
    # "PickCube-v1": torch.Tensor(
    #     [[0, 1, 2, 3, 4, 5, 6, 7, 8, 8],
    #      [1, 0, 1, 2, 3, 4, 5, 6, 7, 7],
    #      [2, 1, 0, 1, 2, 3, 4, 5, 6, 6],
    #      [3, 2, 1, 0, 1, 2, 3, 4, 5, 5],
    #      [4, 3, 2, 1, 0, 1, 2, 3, 4, 4],
    #      [5, 4, 3, 2, 1, 0, 1, 2, 3, 3],
    #      [6, 5, 4, 3, 2, 1, 0, 1, 2, 2],
    #      [7, 6, 5, 4, 3, 2, 1, 0, 1, 1],
    #      [8, 7, 6, 5, 4, 3, 2, 1, 0, 1],
    #      [8, 7, 6, 5, 4, 3, 2, 1, 1, 0]]
    # ),
        "PickCube-v1": torch.Tensor(
        [[0, 1, 2, 2, 2, 2, 2, 1, 2, 2],
         [1, 0, 1, 2, 2, 2, 2, 1, 2, 2],
         [2, 1, 0, 1, 2, 2, 2, 1, 2, 2],
         [2, 2, 1, 0, 1, 2, 2, 1, 2, 2],
         [2, 2, 2, 1, 0, 1, 2, 1, 2, 2],
         [2, 2, 2, 2, 1, 0, 1, 1, 2, 2],
         [2, 2, 2, 2, 2, 1, 0, 1, 2, 2],
         [1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
         [2, 2, 2, 2, 2, 2, 2, 1, 0, 2],
         [2, 2, 2, 2, 2, 2, 2, 1, 2, 0],
        ]),
        "StackCube-v1": torch.Tensor(
        [[0, 1, 2, 2, 2, 2, 2, 1, 2, 2],
         [1, 0, 1, 2, 2, 2, 2, 1, 2, 2],
         [2, 1, 0, 1, 2, 2, 2, 1, 2, 2],
         [2, 2, 1, 0, 1, 2, 2, 1, 2, 2],
         [2, 2, 2, 1, 0, 1, 2, 1, 2, 2],
         [2, 2, 2, 2, 1, 0, 1, 1, 2, 2],
         [2, 2, 2, 2, 2, 1, 0, 1, 2, 2],
         [1, 1, 1, 1, 1, 1, 1, 0, 1, 1],
         [2, 2, 2, 2, 2, 2, 2, 1, 0, 1],
         [2, 2, 2, 2, 2, 2, 2, 1, 1, 0],
        ]),
        "StackCube-v2": torch.Tensor(
        [[0, 1, 2, 3, 4, 5, 6, 7, 8, 8],
         [1, 0, 1, 2, 3, 4, 5, 6, 7, 7],
         [2, 1, 0, 1, 2, 3, 4, 5, 6, 6],
         [3, 2, 1, 0, 1, 2, 3, 4, 5, 5],
         [4, 3, 2, 1, 0, 1, 2, 3, 4, 4],
         [5, 4, 3, 2, 1, 0, 1, 2, 3, 3],
         [6, 5, 4, 3, 2, 1, 0, 1, 2, 2],
         [7, 6, 5, 4, 3, 2, 1, 0, 1, 1],
         [8, 7, 6, 5, 4, 3, 2, 1, 0, 1],
         [8, 7, 6, 5, 4, 3, 2, 1, 1, 0],
        ]),
        "LiftPegUpright-v1": torch.Tensor(
        [[0, 1, 2, 2, 2, 2, 2, 1, 2],
        [1, 0, 1, 2, 2, 2, 2, 1, 2],
        [2, 1, 0, 1, 2, 2, 2, 1, 2],
        [2, 2, 1, 0, 1, 2, 2, 1, 2],
        [2, 2, 2, 1, 0, 1, 2, 1, 2],
        [2, 2, 2, 2, 1, 0, 1, 1, 2],
        [2, 2, 2, 2, 2, 1, 0, 1, 2],
        [1, 1, 1, 1, 1, 1, 1, 0, 1],
        [2, 2, 2, 2, 2, 2, 2, 1, 0],
        ]),
}

DIMS = {
    'D4RL/door/expert-v2': 39,
    'D4RL/hammer/expert-v2': 46,
    'D4RL/relocate/expert-v2': 39,
    'mocapact': 2868,
    'PickCube-v1': 112,
    'StackCube-v1': 45,
    'LiftPegUpright-v1': 27,
}

def is_map_empty(map):
    for k, v in map.items():
        if len(v[0]) or len(v[1]):
            return False
    return True

class Mapping:

    def __init__(self, env_name):
        
        self.dim = DIMS[env_name]
        
        if env_name == "mocapact" and is_map_empty(MAPS[env_name]):
            self.map = create_cmu_humanoid_obs_idx(MAPS[env_name])
            self.shortest_path_matrix = SP_MATRICES["mocapact"]
        else:
            self.map = MAPS[env_name].copy()
            self.shortest_path_matrix = SP_MATRICES[env_name]

    def get_map(self):
        return self.map
    
    def create_observation(self, obs):
        obs = obs.reshape(obs.shape[0], self.dim)
        new_obs = {}
        for k, v in self.map.items():
            new_obs[k] = obs[:,v[0]]
        return new_obs
        